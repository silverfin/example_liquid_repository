name: run-liquid-tests
run-name: Run liquid tests of updated reconciliations and reconciliations that use updated shared parts
on: pull_request
permissions:
  contents: read
jobs:
  test-templates:
    runs-on: ubuntu-latest
    env:
      SF_API_CLIENT_ID: "${{ secrets.SF_API_CLIENT_ID }}"
      SF_API_SECRET: "${{ secrets.SF_API_SECRET }}"
    steps:
      - name: Checkout Repository - Fetch all history for all tags and branches
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Add sf-toolkit package latest version
        run: |
          npm install https://github.com/silverfin/sf-toolkit.git
          VERSION=$(./node_modules/sf_toolkit/bin/cli.js -V)
          echo "CLI version: ${VERSION}"
      - name: Create Silverfin config file
        run: |
          mkdir -p $HOME/.silverfin/
          touch $HOME/.silverfin/config.json
          echo '${{ secrets.CONFIG_JSON }}' > $HOME/.silverfin/config.json
      - name: Get changed files in the reconciliation_texts folder
        id: changed-files-reconciliations
        uses: tj-actions/changed-files@v35
        with:
          since_last_remote_commit: false
          dir_names: true
          files: "reconciliation_texts"
      - name: List all changed files in the reconciliation_texts folder
        run: |
          for file in ${{ steps.changed-files-reconciliations.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
      - name: Run liquid tests for updated reconciliations
        run: |
          declare -a ERRORS
          for CURRENT_DIR in ${{ steps.changed-files-reconciliations.outputs.all_changed_files }}; do
            echo "Checking ${CURRENT_DIR}"
            while [[ "${CURRENT_DIR}" != "." ]]; do
              if [[ -e "${CURRENT_DIR}/config.json" ]]; then
                HANDLE=$(cat ${CURRENT_DIR}/config.json | jq -r ".handle // .name")
                FIRM_ID=$(cat ${CURRENT_DIR}/config.json | jq -r ".id" | jq "keys_unsorted" | jq "first" | tr -d '"')
                if [[ "${CURRENT_DIR}" == *reconciliation_texts* ]]; then
                  # RUN TEST
                  echo "Running tests for ${HANDLE} in firm ${FIRM_ID}"
                  FORMATTED_OUTPUT=$(node ./node_modules/sf_toolkit/bin/cli.js run-test --handle "${HANDLE}" --firm "${FIRM_ID}")
                  OUTPUT=$(node ./node_modules/sf_toolkit/bin/cli.js run-test --handle "${HANDLE}" --firm "${FIRM_ID}" --status 2>&1)
                  # CHECK OUTPUT
                  if [[ "$OUTPUT" =~ "PASSED" ]]; then
                    echo "${HANDLE}: passed"
                  elif [[ "$OUTPUT" =~ "FAILED" ]]; then
                    echo "${HANDLE}: failed"
                    echo "Details of test run: ${FORMATTED_OUTPUT}"
                    ERRORS+=("${HANDLE}")
                  else
                    echo "${HANDLE}: other errors: ${OUTPUT}"
                    ERRORS+=("${OUTPUT}")
                  fi
                fi
                break
              else
                echo "Config file not found in ${CURRENT_DIR}"
                CURRENT_DIR="$(dirname "${CURRENT_DIR}")"
              fi
            done
          done
          # CHECK ERRORS PRESENT
          if [ ${#ERRORS[@]} -eq 0 ]; then
              echo "All tests have passed"
          else
              echo "Errors: ${ERRORS[@]}, please run the tests locally to fix the errors"
              exit 1
          fi
      - name: Get changed files in the shared_parts folder
        id: changed-files-shared-parts
        uses: tj-actions/changed-files@v35
        with:
          since_last_remote_commit: false
          dir_names: true
          files: "shared_parts"
      - name: List all changed files in the shared_parts folder
        run: |
          for file in ${{ steps.changed-files-shared-parts.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
      - name: Run liquid tests for reconciliations that use updated shared parts
        run: |
          declare -a ERRORS
          for CURRENT_DIR in ${{ steps.changed-files-shared-parts.outputs.all_changed_files }}; do
            echo "Checking ${CURRENT_DIR}"
            while [[ "${CURRENT_DIR}" != "." ]]; do
              if [[ -e "${CURRENT_DIR}/config.json" ]]; then
                JSON=$(cat ${CURRENT_DIR}/config.json)
                HANDLES=$(echo "$JSON" | jq -r '.used_in[].handle')
                # LOOP THROUGH EACH RECONCILIATION
                for HANDLE in $HANDLES; do
                  # CHECK IF RECONCILIATION CONFIG IS IMPORTED
                  if [[ -f "./reconciliation_texts/${HANDLE}/config.json" ]]; then
                    # RUN THE TEST FOR THE FIRST FIRM ID IN THE RECONCILIATION CONFIG
                    FIRM_ID=$(cat ./reconciliation_texts/${HANDLE}/config.json | jq -r ".id" | jq "keys_unsorted" | jq "first" | tr -d '"')
                    # RUN TEST
                    echo "Running tests for ${HANDLE} in firm ${FIRM_ID}"
                    FORMATTED_OUTPUT=$(node ./node_modules/sf_toolkit/bin/cli.js run-test --handle "${HANDLE}" --firm "${FIRM_ID}")
                    OUTPUT=$(node ./node_modules/sf_toolkit/bin/cli.js run-test --handle "${HANDLE}" --firm "${FIRM_ID}" --status 2>&1)
                    # CHECK OUTPUT
                    if [[ "$OUTPUT" =~ "PASSED" ]]; then
                      echo "${HANDLE}: passed"
                    elif [[ "$OUTPUT" =~ "FAILED" ]]; then
                      echo "${HANDLE}: failed"
                      echo "Details of test run: ${FORMATTED_OUTPUT}"
                      ERRORS+=("${HANDLE}")
                    else
                      echo "${HANDLE}: other errors: ${OUTPUT}"
                      ERRORS+=("${OUTPUT}")
                    fi
                  fi
                done
                break
              else
                echo "Config file not found in ${CURRENT_DIR}"
                CURRENT_DIR="$(dirname "${CURRENT_DIR}")"
              fi
            done
          done
          # CHECK ERRORS PRESENT
          if [ ${#ERRORS[@]} -eq 0 ]; then
              echo "All tests have passed"
          else
              echo "Errors: ${ERRORS[@]}, please run the tests locally to fix the errors"
              exit 1
          fi
      - name: Prepare CONFIG_JSON for secret
        run: |
          CONFIG_JSON=$(cat $HOME/.silverfin/config.json | tr -d '\n')
          echo "CONFIG_JSON=${CONFIG_JSON}" >> $GITHUB_ENV
        if: always()
      - name: Store CONFIG_JSON as secret
        uses: gliech/create-github-secret-action@v1
        with:
          name: CONFIG_JSON
          value: "${{ env.CONFIG_JSON }}"
          pa_token: ${{ secrets.REPO_ACCESS_TOKEN }}
        if: always()